# Copyright (c) 2021 Open Technologies for Integration
# Licensed under the MIT license (see LICENSE for details)

FROM ubuntu:20.04
MAINTAINER Trevor Dolby <tdolby@uk.ibm.com> (@tdolby)

# Dockerfile for building an ACE server image with an MQ client and MQEndpoint policy plus flows to interact with MQ.
#
# The flows use SYSTEM.DEFAULT.LOCAL.QUEUE and rely on the remoteDefaultQueueManager policy setting for
# MQ connectivity. The policy is called remoteMQ, and is built at container start time from a template copied in from
# templates/remoteMQ.policyxml during the image build process, baking in as few details as possible.
#
# User/password information is provided as environment variables at runtime, avoiding baking in security infomration.
# Many container systems will have other mechanisms for passing in security information (Kubernetes secrets, etc) and
# the environment variable approach used in this file is for illustration purposes only.
#
# This container has the configuration inline in the ENTRYPOINT and RUN scripts; this is so that it is very obvious
# what is being done in various places, but it not necessarily a recommended approach. Shells scripts that perform
# individual functions would allow for less-entangled source control histories (amongst other things), but would be
# harder to follow for this simple example.
#
# The build uses MQ 9.1.0.0 by default, but can be changed to 9.2.2.0 (or any other version) by changing MQ_DOWNLOAD_URL.
#
# Build and run:
#
# docker build -t simple-fried-allconfig --build-arg LICENSE=accept -f Dockerfile.simple-fried-allconfig .
# docker run -e MQQMNAME=qmname -e MQHOST=host -e MQPORT=port -e MQUSER=user -e MQPASS=pwd -p 7600:7600 -p 7800:7800 --rm -ti simple-fried-allconfig

# Customise via build arguments if desired
ARG DOWNLOAD_URL=http://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/integration/11.0.0.12-ACE-LINUX64-DEVELOPER.tar.gz
ARG MQ_DOWNLOAD_URL=http://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/messaging/mqdev/redist/9.1.0.0-IBM-MQC-Redist-LinuxX64.tar.gz

# Change this from command line as above
ARG LICENSE=reject

# Prevent errors about having no terminal when using apt-get
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends curl

# Install MQ client libraries
RUN mkdir /opt/mqm && curl ${MQ_DOWNLOAD_URL} | tar zx --exclude=tools --directory /opt/mqm

# Install ACE v11 and accept the license (if the build arg LICENSE is set to "accept")
RUN mkdir /opt/ibm && curl ${DOWNLOAD_URL} | tar zx --exclude=tools --directory /opt/ibm && \
    mv /opt/ibm/ace-11.* /opt/ibm/ace-11 && /opt/ibm/ace-11/ace make registry global ${LICENSE} license silently

# Create a user to run as, create the ace workdir, and chmod script files
RUN useradd --uid 1001 --create-home --home-dir /home/aceuser --shell /bin/bash -G mqbrkrs,sudo aceuser \
  && su - aceuser -c "export LICENSE=accept && . /opt/ibm/ace-11/server/bin/mqsiprofile && mqsicreateworkdir /home/aceuser/ace-server" \
  && echo ". /opt/ibm/ace-11/server/bin/mqsiprofile" >> /home/aceuser/.bashrc

# Keep podman happy; it doesn't recognise the mqbrkrs membership of the new aceuser, as we've only just added the user.
# Not doing this step results in errors like 
# 
# BIP2113E: IBM App Connect Enterprise internal error: diagnostic information ''Permission denied'', '13', ''/var/mqsi/registry/utility/HASharedWorkPath''. 
#
# further down. Docker doesn't mind us doing this, so everyone is happy.
RUN chown -R aceuser /var/mqsi

# aceuser
USER 1001

# Projects and policies
ADD --chown=1001:mqbrkrs eclipse-projects /tmp/eclipse-projects
ADD --chown=1001:mqbrkrs templates /tmp/templates

# Pull in flows; would be good if we didn't need the BAR file!
RUN bash -c ". /opt/ibm/ace-11/server/bin/mqsiprofile && \
    mqsipackagebar -w /tmp/eclipse-projects -a /tmp/AccessMQ.bar -k AccessMQ && \ 
    mqsibar -c -w /home/aceuser/ace-server -a /tmp/AccessMQ.bar"

# Update server.conf.yaml and put the template into the correct place; note that the
# MQ host and port will be passed in at runtime and will be used in place of the substitution
# placeholders in the policy.
#
# In this case, we create the policy descriptor using static XML text; we could copy the file
# from any policy project, but as long as the content is right it doesn't matter where it comes from.
RUN bash -c "mkdir /home/aceuser/ace-server/run/MQPolicies && \ 
    cp -r /tmp/templates/remoteMQ.policyxml /home/aceuser/ace-server/run/MQPolicies/ && \
    echo '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><ns2:policyProjectDescriptor xmlns=\"http://com.ibm.etools.mft.descriptor.base\" xmlns:ns2=\"http://com.ibm.etools.mft.descriptor.policyProject\"><references/></ns2:policyProjectDescriptor>' > /home/aceuser/ace-server/run/MQPolicies/policy.descriptor && \
    sed -i \"s/#remoteDefaultQueueManager: ''/remoteDefaultQueueManager: '{MQPolicies}:remoteMQ'/g\" /home/aceuser/ace-server/server.conf.yaml"

# Set entrypoint to run the server; printing out the contents of the work directory aids debugging
#
# A shell script could be used in place of this multi-line approach, which is only used here for clarity.
ENTRYPOINT ["bash", "-c", ". /opt/ibm/ace-11/server/bin/mqsiprofile && \
 sed -i \"s/MQQMNAME/${MQQMNAME}/g\" /home/aceuser/ace-server/run/MQPolicies/remoteMQ.policyxml && \
 sed -i \"s/MQHOST/${MQHOST}/g\" /home/aceuser/ace-server/run/MQPolicies/remoteMQ.policyxml && \
 sed -i \"s/MQPORT/${MQPORT}/g\" /home/aceuser/ace-server/run/MQPolicies/remoteMQ.policyxml && \
 mqsisetdbparms --work-dir /home/aceuser/ace-server --resource mq::mqCredentials -u ${MQUSER} -p ${MQPASS} && \
 find /home/aceuser/ace-server -type f -print && \
 IntegrationServer -w /home/aceuser/ace-server"]
